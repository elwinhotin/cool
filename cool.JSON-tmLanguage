// [PackageDev] target_format: plist, ext: tmLanguage
{
	"name": "Cool",
	"scopeName": "source.cool",
	"fileTypes": ["cl"],
	"uuid": "963eee5d-986b-456c-8fbd-d81e05548a88",

	"repository": {
		"block_comment": {
			"comment": "Block Comments",
			"name": "comment.block.cool",
			"begin": "\\(\\*",
			"end": "\\*\\)",
			"patterns": [
				{ "include": "#block_comment" }
			]
		}
	},

	"patterns": [
		{
			"comment": "Line Comments",
			"name": "comment.line.cool",
			"begin": "--",
			"end": "$"
		}, {
			"include": "#block_comment"
		}, {
			"comment": "Strings",
			"name": "string.cool",
			"begin": "(?<!\\\\)\"",
			"end": "(?<!\\\\)\"",
			"patterns": [
				{
					"comment": "Escape Sequences",
					"name": "constant.character.escape.cool",
					"match": "\\\\(n|t)"
				}
			]
		}, {
			"comment": "Class definition",
			"name": "definition.class.cool",
			"match": "\\b((?i:class))\\s+([A-Z][A-Za-z0-9_]*)(\\s+((?i:inherits))\\s+([A-Z][A-Za-z0-9_]*))?\\b",
			"captures": {
				"1": { "name": "keyword.cool" },
				"2": { "name": "entity.name.type.cool" },
				"4": { "name": "keyword.cool" },
				"5": { "name": "entity.name.type.cool" }
			}
		}, {
			"comment": "Method definition",
			"name": "definition.method.cool",
			"match": "\\b([a-z][A-Za-z0-9_]*)\\s*\\(\\s*(?:([a-z][A-Za-z0-9_]*)\\s*:\\s*([A-Z][A-Za-z0-9_]*))?(?:\\s*,\\s*([a-z][A-Za-z0-9_]*)\\s*:\\s*([A-Z][A-Za-z0-9_]*))*\\s*\\)\\s*:\\s*([A-Z][A-Za-z0-9_]*)\\b",
			"captures": {
				"1": { "name": "entity.name.function.cool" },
				"2": { "name": "variable.parameter.cool" },
				"3": { "name": "storage.type.cool" },
				"4": { "name": "variable.parameter.cool" },
				"5": { "name": "storage.type.cool" },
				"6": { "name": "storage.type.cool" }
			}
		}, {
			"comment": "Integer literal",
			"name": "number.cool",
			"match": "\\b([1-9][0-9]*)\\b",
			"captures": {
				"2": { "name": "keyword.operator.cool" },
				"3": { "name": "constant.numeric.cool" },
				"5": { "name": "keyword.operator.cool" }
			}
		}, {
			"comment": "Boolean Constants",
			"name": "constant.language.cool",
			"match": "\\b((t(?i:rue))|(f(?i:alse)))"
		}, {
			"comment": "Language operators",
			"name": "keyword.operator.cool",
			"match": "(=>|<-|<=|@|/|<|-|~|=|\\+|\\*)"
		}, {
			"comment": "Control flow tokens",
			"name": "keyword.control.cool",
			"match": "\\b(?i:case|class|else|esac|fi|if|in|inherits|isvoid|let|loop|new|not|of|pool|then|while)\\b"
		}, {
			"comment": "Type identifier",
			"name": "storage.type.cool",
			"match": "\\b([A-Z][A-Za-z0-9_]*)"
		}
	]
}
